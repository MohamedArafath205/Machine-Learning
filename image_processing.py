# -*- coding: utf-8 -*-
"""Image Processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BTjoVVcJ88DoXUfMbkDtrJXBSPyM96ds
"""

# We will use this on python IDLE

# 1. Reading the image

import cv2
img = cv2.imread('abc.jpg')
cv2.imshow('output1', img)

cv2.waitKey(0)
cv2.destroyAllWindows()

# 2. Creating a duplicate image

import cv2
img = cv2.imread('abc.jpg')
cv2.imshow('ouput 1', img)

cv2.imwrite('arafath.png', img)

cv2.waitKey(0)
cv2.destroyAllWindows()

# 3. Read the information about the image

import cv2
img = cv2.imread('abc.jpg')
print(img.shape)

# output (x,y,z)
# x - height of the image in pixel
# y - width of the image in pixel
# z - channel/depth of the image

# 4. Grayscale image(Black and White image)

import cv2
img = cv2.imread('abc.jpg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2.imshow('Normal image', img)
cv2.imshow('Black and White image', gray)

cv2.waitKey(0)
cv2.destroyAllWindows()

# 4. Grayscale image Short program (Black and White image)

import cv2
img = cv2.imread('abc.jpg', 0)
cv2.imshow('GREYSCALE IMAGE', img)

cv2.waitKey(0)
cv2.destroyAllWindows()

# 5. Binary image converstion (HIGH CONTRAST IMAGE)

import cv2
img = cv2.imread('abc.jpg', 0)
cv2.imshow('GRAYSCALE IMAGE', img)

cv2.waitKey(2000)

#______cv2.THRESH_BINARY(SRC, thresh, maxvalue, converstion type)______

ret,binary = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY) # Converts image to Greyscale to binary

#______ret and binary are 2 varibale to be taken. Here ret is a dummy varibale______

cv2.imshow('BINARY IMAGE', binary)

cv2.waitKey(0)
cv2.destroyAllWindows()

# 6. Solid Background(Black or White)

import cv2
import numpy as np

img = np.ones((500,500,3)) # (500, 500, 3) 1 - is length, 2 - is the width, 3 - depth/channel value

# np.zeros(500,500,3) - creates a blackbackground

# We are creating a image of background white

cv2.imshow('White', img)

cv2.waitKey(0)
cv2.destroyAllWindow()

# 7. Solid colors (RED, GREEN AND BLUE)

import cv2
import numpy as np

img = np.zeros((250,250,3))

img[:] = 0,0,255 # Makes sure it selects the whole image, 0,0,255 is assigning the color (B,G,R)

# to get green (0, 255, 0)
# to get blue (255, 0, 0)

cv2.imshow('RED', img)

cv2.waitKey(0)
cv2.destroyAllWindows()

# 8. CHECKER BOARD

import cv2
import numpy as np

img = np.zeros((200,200,3)) # Black Background

img[0:100, 0:100] = 255, 255, 255 # Selects the x and y axis (I QUADRANT)

img[100:200, 100:200] = 255,255,255 # Selects the x and y axis (IV QUADRANT)



cv2.imshow_('Checker Board', img)

cv2.waitKey(0)
cv2.destroyAllWindows()

# 9. Resizing the image or Scaling

import cv2
import numpy as np

img = cv2.imread('abc.jpg') # Reading the image
cv2.imshow('Unscaled image', img)
cv2.waitKey(500)

# 1. Let us scale down the image to 75%
# cv2.resize(image source, DataType, fx, fy)

img1 = cv2.resize(img, None, fx=0.75, fy=0.75)
cv2.imshow('Scaled Down image', img1)
cv2.waitKey(500)

# 2. Let us scale up the image to 150%

img2 = cv2.resize(img, None, fx=1.5, fy=1.5)
cv2.imshow('Scaled up image', img2)
cv2.waitKey(500)

# 3. Scaling using custom dimensions

img3 = cv2.resize(img, (1000,400))
cv2.imshow('Custom Dimensions', img3)

cv2.waitKey(0)
cv2.destroyAllWindows()

# 10. Rectangle/Square

import cv2
import numpy as np

img = np.zeros((500,500,3)) # Creates a Black Background

# cv2.rectangle(source, point1, point2, color, Thickness)

cv2.rectangle(img, (200, 200), (400, 400), (0,255,0), 5)
cv2.imshow('Rectangle', img)

cv2.waitKey(0)
cv2.destroyAllWindows()

# 11. Live Video From Webcam

import cv2

cap = cv2.VideoCapture(0) # 0 is the default webcam port. We can use 1 for external Webcams

while True:
    ret,frame = cap.read() # Reads our Webcam From our cap variable
    # ret and frame are 2 variables to be considered
    # we only use frame variable. ret is dummy

    cv2.imshow('My Live Sketch', frame)
    # If you want to close press "Enter"
    if cv2.waitKey(1)==13: # 13 is the ASCII value of "enter" button
        break

cap.release() # It releases the default web cam port
# if we dont use this cap.release our webcam might get corrupt
cv2.destroyAllWindows()

# 12. My canny sketch
# canny is a edge detection technique

import cv2
cap = cv2.VideoCapture(0)

while True:
    ret,frame = cap.read()
    canny = cv2.Canny(frame, 20, 150) # 20,150 are the threshold value for best edge detection
    cv2.imshow('My Canny Sketch', canny)
    # To close press 'Q'
    if cv2.waitKey(1)==ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

