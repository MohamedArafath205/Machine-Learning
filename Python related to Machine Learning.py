# -*- coding: utf-8 -*-
"""RINEX.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tOGcDqress1ZKEt_I7FL3qNsKXwSGaN9
"""

# DICTIONARY IN PYTHON
# default synatx - dict = {'key1':'value1', 'key2':'value2'}

data = {1:'Python', 2:'Java', 3:'C++', 4:'Kotlin'}
data

type(data) # output's the data type

cars = {'brands':['Maruthi', 'Ford', 'Volvo'], 'passings':['3', '5', '7']}
cars

# Python libraries needed for Machine learning and Data Science
# NumPy, Pandas, Matplotlib, Seaborn, Plotly, Sklearn, opencv, yolo, tweepy
# Python libraries - collection of modules

# Numpy - Numerical Python (expansion)
# used instead of a list
# To store numerical datas
# Faster and efficient when compared to a list
# The output of numpy is always an array

import numpy as np
a = np.array(1) # Technical term for 0 dimensional array is Scaler
a

type(a) # ndarray - n dimensional array

a.ndim # To check the dimensions of an array you have to use this
# It output's zero in this case coz it has zero dimensions

a.size # Total elements in an array

a.shape # tells us the total number of rows and columns

b = np.array([1,2,3,4,5]) # 1 dimensional is called as Vector
b

type(b)

b.size

b.shape # (5,) - (5,1) it is 5 columns and 1 row

b.ndim

# a = np.array(1) # Technical term for 0 dimensional array is Scaler
# b = np.array([1,2,3,4,5]) # 1 dimensional is called as Vector
c = np.array([[1,2,3], [4,5,6]]) # 2 dimensional is called as Matrix
c

type(c)

c.ndim

c.shape # it is 2 rows and 3 columns

c.size

m = np.array([1,2,3]) # If we have 1 square bracket it is 1 dimensional, 2 - vice versa, 0 - vice versa
m.ndim

n = np.array([1])
n.ndim

# np - numpy, random - package, randint - library
np.random.seed(0) # seed locks a particular set of values and everyone gets the same 
d = np.random.randint(0,50,10)
# (0,50,10) - (start, end, total no.of.values to be generated)
d

e = np.random.randint(0,10,10)
e

d = np.random.randint(0,10,10)
d

d.ndim

d.shape

d.size

d.reshape(2,5) # reshapes in 2 rows and 5 columns

d # since the above operation is not saved in a variable it shows the previous d values

d = d.reshape(2,5)
d

# Possible combinations for reshaping
# 1) 2 rows and 2 columns
# 2) 5 column and 2 rows
# 3) 1 column and 10 rows
# 4) 1 row and 10 columns
# We cannot Ignore a particular element

# np.ones - creates an array with only element '1'
# Ones is for the High State and the value for High state is 255
# color for high states or ones is "WHITE"
x = np.ones(25)
x

n.shape

n.size

n.ndim

# opencv is for image classification 
y = np.ones(55)
y

y = np.zeros(55) 
# creates an array with only element zero
y

# NEW TOPIC MATPLOTLIB

# Line Graph

# Line Graph using numpy array
import numpy as np
import matplotlib.pyplot as plt
a = np.array([1,2,3,4])
b = np.array([5,6,7,8])
plt.plot(a,b,color="gold", marker='v')
plt.xlabel('X-label')
plt.ylabel('Y-lable')
plt.title('LINE GRAPH')
plt.grid()

# ANALYSIS OF A CRICKET MATCH
overs = [0,4,8,12,16,20]
team1 = [0,30,67,98,123,145]
team2 = [0,27,75,103,110,135]
plt.plot(overs,team1, label='Team 1')
plt.plot(overs,team2, label='Team 2')
plt.legend()
plt.title('Analysis of a Cricket Match')
plt.grid()
plt.xlabel('Overs')
plt.ylabel('Runs')

#2. SUB PLOT

fig = plt.figure() #This line creates a figure

ax1 = fig.add_subplot(221) # We are adding a subplot at 221 in I quadrant (221) 2-for rows 2-column and 1 for quadrant
ax2 = fig.add_subplot(224) # We are adding a subplot at 224 in IV quadrant III'y
ax3 = fig.add_subplot(223) # We are adding a subplot at 223 in III quadrant III'y

x1 = [1,2,3,4]
x2 = [5,6,7,8]
y1 = np.random.randint(0,30,4)
y2 = np.random.randint(0,30,4)

ax1.plot(x1, y1) # var.plot(x-axis, y-axis)
ax2.plot(x2, y2) #

# SCATTER PLOT
a = [1,2,3,4,5]
b = [2,3,4,5,6]
plt.scatter(a,b,marker='D', color='Orange')
plt.title('Scatter plot')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

a = np.array([1,2,3,4,5,6,7,8,9,10])
b = [5,4,6,2,3,1,7,5,8,5]
plt.scatter(a,b,color='limegreen')
plt.title('Scatter plot with numpy and coords')

m = [1,2,3,4,5]
n = [5,6,7,8,9]
plt.scatter(m,n,c='orange') # here c stands for color
plt.plot(m,n,c='lime')
plt.title('Line and Scatter plots together')

#4. BAR GRAPH

name = ['Raj', 'Alex', 'sam', 'Tharun', 'Ross']
num = [4,2,7,5,1]
plt.title('Bar Graph - NAME V/S NUMBERS')
plt.xlabel('Name')
plt.ylabel('Numbers')
plt.barh(name,num, color=['Orange', 'gold', 'lime', 'Red', 'M']) # bar for vertical and plt.barh for horizontal

