# -*- coding: utf-8 -*-
"""Pandas and Visualizing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YqgWgkTM5AqURTQxfPPZhU-1mS4jbcAB
"""

# PANDAS - Used to create datafarmes and CVs
# Dataframes - Table data (or) data in form of the table
# CV - nothing is columns

my_datasets = {'cars':['BMW', 'Volvo', 'Ford'], 'passings':[3,7,2]}
my_datasets

type(my_datasets)

# Let us create a dataframe
import pandas as pd
df = pd.DataFrame(my_datasets)
df # If the alternate rows is in different color then it is a dataframe
# we can also use type here

type(df)

a = [1,7,2,6]
myvar = pd.Series(a)
myvar # on output the first column is s.no and the 2 column is the parameter

# Using pandas we can easily change the index
a = [1,7,2,6]
myvar1 = pd.Series(a,index=['w', 'x', 'y', 'z'])
myvar1 # now the serial number is changed due to the pandas lib

sports1 = pd.Series([1,2,3,4], index=['Cricket', 'Football', 'Hockey', 'Golf'])
sports1

sports2 = pd.Series([1,2,5,4], index=['Cricket', 'Basket Ball', 'Base Ball', 'Golf'])
sports2

s = sports1 + sports2
s

# NaN - Not a Number in few cases we also call as null value or missing value
# Whenever NaN comes into picture 'INT' is converted into 'FLOAT'

# Let us drop all the null values
s.dropna() # not permanent since we are not using a variable

# let us replace the NaN value with integer or number
s = s.fillna(value=1)

s

# EXPLORATORY DATA ANALYSIS (EDA) IMP
# Refered as Pre Machine Learning
# EDA - We find different insights, we come to different conclusions and we explore our data

# DataFrame - Tabled Data
# DataSet - Raw unprocessed data in the form of rows and columns

# DataSet - can be obtained from Kaggle. url for fruits color in kaggle (https://storage.googleapis.com/kagglesdsdata/datasets/9590/13660/fruit_data_with_colors.txt?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20221129%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20221129T150101Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=bfd52c9069646b662891520996392f01e8023cb4dbe68ac27f3dcef270bfd7e542bc889ed648e5159e80ad1840468bf6d6f9308f62e268b01c3c65217b0f73daedef1cf3c54de0757ae71f9610d4f8b7c9ad0b9e240bfcd099028f600d784866d1fa6f43c3c91a4205ca642d4e4e436f3455ffa033cdd08cd60e2dd5047d699cf009ccba41ef06455d253d8bb4c0384fe0f6e6e4fab320da2c32a66c6b2397c96b13ded65e00a8ec3972a1f0f75fd8c5d03f533f5746aa67062456f6cddbabfc4cca28e1edc42a9a4cfc21dc1dccbe8593dcd91b94a523a14039d000bd5e64bb23c02b48dd4f1270513d419952f503306f807491a5c23bad9ff151e53b760fdd)
# 1. Take the data and create dataframes
import pandas as pd
df = pd.read_csv('https://storage.googleapis.com/kagglesdsdata/datasets/9590/13660/fruit_data_with_colors.txt?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20221129%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20221129T150101Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=bfd52c9069646b662891520996392f01e8023cb4dbe68ac27f3dcef270bfd7e542bc889ed648e5159e80ad1840468bf6d6f9308f62e268b01c3c65217b0f73daedef1cf3c54de0757ae71f9610d4f8b7c9ad0b9e240bfcd099028f600d784866d1fa6f43c3c91a4205ca642d4e4e436f3455ffa033cdd08cd60e2dd5047d699cf009ccba41ef06455d253d8bb4c0384fe0f6e6e4fab320da2c32a66c6b2397c96b13ded65e00a8ec3972a1f0f75fd8c5d03f533f5746aa67062456f6cddbabfc4cca28e1edc42a9a4cfc21dc1dccbe8593dcd91b94a523a14039d000bd5e64bb23c02b48dd4f1270513d419952f503306f807491a5c23bad9ff151e53b760fdd', sep = '\t')
df  # sep = '\t' removes the parameter

import pandas as pd
df = pd.read_csv('/content/fruit_data_with_colors.txt', sep='\t')
df

df.shape # 59 rows and 7 columns

df.size # total number of elements in df

df.info() # it gives the info about dataframe

# Slicing
# slice row index from 25 to 43.
# syntax - var[inclusive:exclusive]
df[25:44] # 25 is inclusive and 45 is exclusive

# Slicing 
# slice row index to 25 to 43 and columns index 0 and 1
# syntax - var.iloc[row slicing, column slicing]
df.iloc[25:44, 0:2]

# Now I just want to know the exact number of the unique fruits name
df.fruit_name.nunique() # from the data frame selected the columns and want to get the no.of unique element

df['fruit_name'].nunique() # from the data frame selected the columns and want to get the no.of unique element

# I want the unique fruits name
df['fruit_name'].unique() # gives the name

fname = df.fruit_name.unique()

fname

# Now I want the exact number of each fruits
# apples - 19
# Mandarin - 5
# oranges - 19
# lemon - 16
# This was done manually since we have small datasets

fsize = df.groupby('fruit_name').size() # here groupby starts by fruits name in alphabetical order
fsize

# VISUALISATION
import matplotlib.pyplot as plt
plt.bar(fname, fsize,color=['red', 'gold', 'orange', 'lime']) # since we matplotlib doesnot follow alphabetical order we need to sort it

fsize = df.groupby('fruit_name', sort=False).size()
fsize

# VISUALISATION
import matplotlib.pyplot as plt
plt.bar(fname, fsize,color=['red', 'gold', 'orange', 'lime']) # Now the corrected order is given now